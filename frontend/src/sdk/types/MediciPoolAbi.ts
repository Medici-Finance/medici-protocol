/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MediciPoolAbiInterface extends utils.Interface {
  functions: {
    "_slash(uint256)": FunctionFragment;
    "approve(uint256)": FunctionFragment;
    "approvers(address)": FunctionFragment;
    "borrowers(address)": FunctionFragment;
    "burnShares(uint256)": FunctionFragment;
    "calcIntr(uint256,uint256)": FunctionFragment;
    "checkDefault(uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getApprovalLimit(uint256)": FunctionFragment;
    "getBorrowLimit(uint256)": FunctionFragment;
    "getBorrowerLoan(address,uint256)": FunctionFragment;
    "getInitialBorrowLimit()": FunctionFragment;
    "getLendingRate()": FunctionFragment;
    "getPoolReserves()": FunctionFragment;
    "getPoolShare(uint256)": FunctionFragment;
    "getRepayAmount(address)": FunctionFragment;
    "getReputation()": FunctionFragment;
    "getTotalShares()": FunctionFragment;
    "initialize()": FunctionFragment;
    "lendingRateAPR()": FunctionFragment;
    "loanAlreadyExists(address,uint256)": FunctionFragment;
    "loans(uint256)": FunctionFragment;
    "maxLoanAmount()": FunctionFragment;
    "maxTimePeriod()": FunctionFragment;
    "minPoolAllocation()": FunctionFragment;
    "mintNewShares(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "request(uint256)": FunctionFragment;
    "setLendingRate(uint256)": FunctionFragment;
    "setUSDCAddress(address)": FunctionFragment;
    "totalShares()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateApproverReputation(address)": FunctionFragment;
    "updateBorrowerReputation(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_slash"
      | "approve"
      | "approvers"
      | "borrowers"
      | "burnShares"
      | "calcIntr"
      | "checkDefault"
      | "deposit"
      | "getApprovalLimit"
      | "getBorrowLimit"
      | "getBorrowerLoan"
      | "getInitialBorrowLimit"
      | "getLendingRate"
      | "getPoolReserves"
      | "getPoolShare"
      | "getRepayAmount"
      | "getReputation"
      | "getTotalShares"
      | "initialize"
      | "lendingRateAPR"
      | "loanAlreadyExists"
      | "loans"
      | "maxLoanAmount"
      | "maxTimePeriod"
      | "minPoolAllocation"
      | "mintNewShares"
      | "owner"
      | "renounceOwnership"
      | "repay"
      | "request"
      | "setLendingRate"
      | "setUSDCAddress"
      | "totalShares"
      | "transferOwnership"
      | "updateApproverReputation"
      | "updateBorrowerReputation"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_slash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnShares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcIntr",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDefault",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovalLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowerLoan",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialBorrowLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolShare",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingRateAPR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanAlreadyExists",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "loans",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLoanAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPoolAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewShares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDCAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateApproverReputation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBorrowerReputation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "_slash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approvers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcIntr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApprovalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowerLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingRateAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanAlreadyExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxLoanAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPoolAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLendingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApproverReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBorrowerReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DepositMade(address,uint256,uint256)": EventFragment;
    "LoanApproved(address,address,uint256,uint256)": EventFragment;
    "NewLoanRequest(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WithdrawalMade(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLoanRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalMade"): EventFragment;
}

export interface DepositMadeEventObject {
  poolProvider: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type DepositMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositMadeEventObject
>;

export type DepositMadeEventFilter = TypedEventFilter<DepositMadeEvent>;

export interface LoanApprovedEventObject {
  approver: string;
  borrower: string;
  loanId: BigNumber;
  amount: BigNumber;
}
export type LoanApprovedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LoanApprovedEventObject
>;

export type LoanApprovedEventFilter = TypedEventFilter<LoanApprovedEvent>;

export interface NewLoanRequestEventObject {
  borrower: string;
  loanId: BigNumber;
  amount: BigNumber;
}
export type NewLoanRequestEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewLoanRequestEventObject
>;

export type NewLoanRequestEventFilter = TypedEventFilter<NewLoanRequestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawalMadeEventObject {
  poolProvider: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type WithdrawalMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawalMadeEventObject
>;

export type WithdrawalMadeEventFilter = TypedEventFilter<WithdrawalMadeEvent>;

export interface MediciPoolAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MediciPoolAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _slash(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        reputation: BigNumber;
        approvalLimit: BigNumber;
        currentlyApproved: BigNumber;
      }
    >;

    borrowers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        borrowLimit: BigNumber;
        currentlyBorrowed: BigNumber;
        reputation: BigNumber;
      }
    >;

    burnShares(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcIntr(
      _amt: PromiseOrValue<BigNumberish>,
      _durationDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkDefault(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApprovalLimit(
      _reputation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBorrowLimit(
      _reputation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBorrowerLoan(
      _borrower: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInitialBorrowLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLendingRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolShare(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRepayAmount(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReputation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTotalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lendingRateAPR(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanAlreadyExists(
      _bAddr: PromiseOrValue<string>,
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        borrower: string;
        amount: BigNumber;
        approver: string;
        startTime: BigNumber;
      }
    >;

    maxLoanAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTimePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPoolAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintNewShares(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      _loanId: PromiseOrValue<BigNumberish>,
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    request(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLendingRate(
      _lendingRateAPR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUSDCAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateApproverReputation(
      _aa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBorrowerReputation(
      _ba: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _slash(
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      reputation: BigNumber;
      approvalLimit: BigNumber;
      currentlyApproved: BigNumber;
    }
  >;

  borrowers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      borrowLimit: BigNumber;
      currentlyBorrowed: BigNumber;
      reputation: BigNumber;
    }
  >;

  burnShares(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcIntr(
    _amt: PromiseOrValue<BigNumberish>,
    _durationDays: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkDefault(
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApprovalLimit(
    _reputation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBorrowLimit(
    _reputation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBorrowerLoan(
    _borrower: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInitialBorrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getLendingRate(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolReserves(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolShare(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRepayAmount(
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReputation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lendingRateAPR(overrides?: CallOverrides): Promise<BigNumber>;

  loanAlreadyExists(
    _bAddr: PromiseOrValue<string>,
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loans(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      borrower: string;
      amount: BigNumber;
      approver: string;
      startTime: BigNumber;
    }
  >;

  maxLoanAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  minPoolAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  mintNewShares(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    _loanId: PromiseOrValue<BigNumberish>,
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  request(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLendingRate(
    _lendingRateAPR: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUSDCAddress(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateApproverReputation(
    _aa: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBorrowerReputation(
    _ba: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _slash(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        reputation: BigNumber;
        approvalLimit: BigNumber;
        currentlyApproved: BigNumber;
      }
    >;

    borrowers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        borrowLimit: BigNumber;
        currentlyBorrowed: BigNumber;
        reputation: BigNumber;
      }
    >;

    burnShares(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calcIntr(
      _amt: PromiseOrValue<BigNumberish>,
      _durationDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDefault(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getApprovalLimit(
      _reputation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowLimit(
      _reputation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowerLoan(
      _borrower: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialBorrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolShare(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepayAmount(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReputation(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    lendingRateAPR(overrides?: CallOverrides): Promise<BigNumber>;

    loanAlreadyExists(
      _bAddr: PromiseOrValue<string>,
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        borrower: string;
        amount: BigNumber;
        approver: string;
        startTime: BigNumber;
      }
    >;

    maxLoanAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    minPoolAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    mintNewShares(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      _loanId: PromiseOrValue<BigNumberish>,
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    request(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingRate(
      _lendingRateAPR: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDCAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateApproverReputation(
      _aa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBorrowerReputation(
      _ba: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositMade(address,uint256,uint256)"(
      poolProvider?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null
    ): DepositMadeEventFilter;
    DepositMade(
      poolProvider?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null
    ): DepositMadeEventFilter;

    "LoanApproved(address,address,uint256,uint256)"(
      approver?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      loanId?: null,
      amount?: null
    ): LoanApprovedEventFilter;
    LoanApproved(
      approver?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      loanId?: null,
      amount?: null
    ): LoanApprovedEventFilter;

    "NewLoanRequest(address,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      loanId?: null,
      amount?: null
    ): NewLoanRequestEventFilter;
    NewLoanRequest(
      borrower?: PromiseOrValue<string> | null,
      loanId?: null,
      amount?: null
    ): NewLoanRequestEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "WithdrawalMade(address,uint256,uint256)"(
      poolProvider?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null
    ): WithdrawalMadeEventFilter;
    WithdrawalMade(
      poolProvider?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null
    ): WithdrawalMadeEventFilter;
  };

  estimateGas: {
    _slash(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnShares(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcIntr(
      _amt: PromiseOrValue<BigNumberish>,
      _durationDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDefault(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApprovalLimit(
      _reputation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBorrowLimit(
      _reputation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBorrowerLoan(
      _borrower: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialBorrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolShare(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepayAmount(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReputation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lendingRateAPR(overrides?: CallOverrides): Promise<BigNumber>;

    loanAlreadyExists(
      _bAddr: PromiseOrValue<string>,
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLoanAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    minPoolAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    mintNewShares(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      _loanId: PromiseOrValue<BigNumberish>,
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    request(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLendingRate(
      _lendingRateAPR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUSDCAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateApproverReputation(
      _aa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBorrowerReputation(
      _ba: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _slash(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnShares(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcIntr(
      _amt: PromiseOrValue<BigNumberish>,
      _durationDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkDefault(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApprovalLimit(
      _reputation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowLimit(
      _reputation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowerLoan(
      _borrower: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialBorrowLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolShare(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepayAmount(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTotalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lendingRateAPR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanAlreadyExists(
      _bAddr: PromiseOrValue<string>,
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLoanAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTimePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPoolAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNewShares(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      _loanId: PromiseOrValue<BigNumberish>,
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    request(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLendingRate(
      _lendingRateAPR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUSDCAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateApproverReputation(
      _aa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowerReputation(
      _ba: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
